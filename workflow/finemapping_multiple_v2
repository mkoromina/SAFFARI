from snakemake.io import expand
import pandas as pd

SS = config["summary_stats_prefix"]
CHR = list(range(1, 23))

snp_tables = {}
full_sumstats = {}
sample_size = {}
top_loci_files = config["top_loci_file"]
i = 0

for ss in SS:
    tsv_file = top_loci_files[i]
    snp_tables[ss] = pd.read_table(tsv_file, sep='\t', dtype=str).set_index("SNP", drop=False)
    full_sumstats[ss] = config["full_sumstats"][i]
    sample_size[ss] = config["N"][i]
    i += 1

print(snp_tables)

rule all:
    input:
        expand("output/{ss}_neff.munged.parquet", ss=SS),
        expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge_constrained.gz", ss=SS, chr=CHR),
        expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge.gz", ss=SS, chr=CHR),
        expand("output/{ss}/polyfun_susie_UKB_finemap/{ss}_finemap.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist()),
        expand("output/{ss}/polyfun_susie_UKB_finemap/{ss}_polyfun_susie_all.txt.gz", ss=SS),
        expand("output/{ss}/polyfun_finemap_UKB_finemap/{ss}_finemap_finemap.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist()),
        expand("output/{ss}/polyfun_finemap_UKB_finemap/{ss}_polyfun_finemap_all.txt.gz", ss=SS),
        expand("output/{ss}/only_finemap_UKB_finemap/{ss}_only_finemap.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist()),
        expand("output/{ss}/only_finemap_UKB_finemap/{ss}_only_finemap_all.txt.gz", ss=SS),
        expand("output/{ss}/only_susie_UKB_finemap/{ss}_only_susie.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist()),
        expand("output/{ss}/only_susie_UKB_finemap/{ss}_only_susie_all.txt.gz", ss=SS)


rule munge_polyfun:
    input: lambda wildcards: full_sumstats[wildcards.ss]
    output: "output/{ss}_neff.munged.parquet"
    conda: "envs/polyfun.yml"
    resources: mem_mb=20000
    shell:
        """
        python polyfun/munge_polyfun_sumstats.py \
        --sumstats {input} \
        --out {output} \
        --min-info 0.6 \
        --min-maf 0
        """

rule l2reg_sldsc:
    input:
        gwas=expand("output/{ss}_neff.munged.parquet", ss=SS)
    output:
        output1=expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge_constrained.gz", ss=SS, chr=CHR),
        output2=expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge.gz", ss=SS, chr=CHR)
    params:
        weights="/weights.UKB.",
        ldscores="/baselineLF2.2.UKB.",
        prefix=expand("output/{ss}/priors/{ss}_l2-ldsc", ss=SS)
    conda: "envs/polyfun.yml"
    resources: mem_mb=170000
    shell:
        """
        python polyfun/polyfun.py \
            --compute-h2-L2 \
            --no-partitions \
            --output-prefix {params.prefix} \
            --sumstats {input.gwas} \
            --allow-missing \
            --ref-ld-chr /sc/arion/projects/ad-omics/ashvin/finemapping/UKBB_priors/hg19_baselineLF2.2.UKB{params.ldscores} \
            --w-ld-chr /sc/arion/projects/ad-omics/ashvin/finemapping/UKBB_priors/hg19_baselineLF2.2.UKB{params.weights}
        """

rule run_polyfun_susie:
    input:
        snpvar=expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge_constrained.gz", ss=SS, chr=CHR)
    output:
        output=expand("output/{{ss}}/polyfun_susie_UKB_finemap/{{ss}}_finemap.{{snp}}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    params:
        sample_size_gwas=lambda wildcards: sample_size[wildcards.ss],
        chrom=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['chrom_orig'],
        pos=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['BP'],
        start=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.left'],
        end=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.right'],
        ld_ranges=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['file']
    conda: "envs/polyfun.yml"
    resources: mem_mb=32000
    shell:
        """
        python polyfun/finemapper.py \
        --ld /sc/arion/projects/data-ark/Public_Unrestricted/UKBB_LD/{params.ld_ranges} \
        --sumstats output/{wildcards.ss}/priors/{wildcards.ss}_l2-ldsc.{params.chrom}.snpvar_ridge_constrained.gz \
        --n {params.sample_size_gwas} \
        --chr {params.chrom} \
        --start {params.start} \
        --end {params.end} \
        --method susie \
        --max-num-causal 5 \
        --out {output.output} \
        --allow-missing
        """

rule merge_finemapping_jobs_polysusie:
    input: expand("output/{{ss}}/polyfun_susie_UKB_finemap/{{ss}}_finemap.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    output: "output/{ss}/polyfun_susie_UKB_finemap/{ss}_polyfun_susie_all.txt.gz"
    conda: "envs/polyfun.yml"
    resources: mem_mb=8000
    shell: "cat {input} >> {output}"

rule run_polyfun_finemap:
    input:
        snpvar=expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge_constrained.gz", ss=SS, chr=CHR)
    output:
        output=expand("output/{{ss}}/polyfun_finemap_UKB_finemap/{{ss}}_finemap_finemap.{{snp}}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    params:
        sample_size_gwas=lambda wildcards: sample_size[wildcards.ss],
        chrom=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['chrom_orig'],
        pos=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['BP'],
        start=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.left'],
        end=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.right'],
        ld_ranges=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['file']
    conda: "envs/polyfun.yml"
    resources: mem_mb=32000
    shell:
        """
        python polyfun/finemapper.py \
        --ld /sc/arion/projects/data-ark/Public_Unrestricted/UKBB_LD/{params.ld_ranges} \
        --sumstats output/{wildcards.ss}/priors/{wildcards.ss}_l2-ldsc.{params.chrom}.snpvar_ridge_constrained.gz \
        --n {params.sample_size_gwas} \
        --chr {params.chrom} \
        --start {params.start} \
        --end {params.end} \
        --method finemap \
        --max-num-causal 5 \
        --out {output.output} \
        --allow-missing
        """

rule merge_finemapping_jobs_polyfinemap:
    input: expand("output/{{ss}}/polyfun_finemap_UKB_finemap/{{ss}}_finemap_finemap.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    output: "output/{ss}/polyfun_finemap_UKB_finemap/{ss}_polyfun_finemap_all.txt.gz"
    conda: "envs/polyfun.yml"
    resources: mem_mb=8000
    shell: "cat {input} >> {output}"

rule run_only_finemap:
    input:
        snpvar=expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge_constrained.gz", ss=SS, chr=CHR)
    output:
        output=expand("output/{{ss}}/only_finemap_UKB_finemap/{{ss}}_only_finemap.{{snp}}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    params:
        sample_size_gwas=lambda wildcards: sample_size[wildcards.ss],
        chrom=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['chrom_orig'],
        pos=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['BP'],
        start=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.left'],
        end=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.right'],
        ld_ranges=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['file']
    conda: "envs/polyfun.yml"
    resources: mem_mb=32000
    shell:
        """
        python polyfun/finemapper.py \
        --ld /sc/arion/projects/data-ark/Public_Unrestricted/UKBB_LD/{params.ld_ranges} \
        --sumstats output/{wildcards.ss}/priors/{wildcards.ss}_l2-ldsc.{params.chrom}.snpvar_ridge_constrained.gz \
        --n {params.sample_size_gwas} \
        --chr {params.chrom} \
        --start {params.start} \
        --end {params.end} \
        --method finemap \
        --max-num-causal 5 \
        --out {output.output} \
        --allow-missing
        """

rule merge_finemapping_jobs_onlyfinemap:
    input: expand("output/{{ss}}/only_finemap_UKB_finemap/{{ss}}_only_finemap.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    output: "output/{ss}/only_finemap_UKB_finemap/{ss}_only_finemap_all.txt.gz"
    conda: "envs/polyfun.yml"
    resources: mem_mb=8000
    shell: "cat {input} >> {output}"

rule run_only_susie:
    input:
        snpvar=expand("output/{ss}/priors/{ss}_l2-ldsc.{chr}.snpvar_ridge_constrained.gz", ss=SS, chr=CHR)
    output:
        output=expand("output/{{ss}}/only_susie_UKB_finemap/{{ss}}_only_susie.{{snp}}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    params:
        sample_size_gwas=lambda wildcards: sample_size[wildcards.ss],
        chrom=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['chrom_orig'],
        pos=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['BP'],
        start=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.left'],
        end=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['range.right'],
        ld_ranges=lambda wildcards: snp_tables[wildcards.ss].loc[wildcards.snp]['file']
    conda: "envs/polyfun.yml"
    resources: mem_mb=32000
    shell:
        """
        python polyfun/finemapper.py \
        --ld /sc/arion/projects/data-ark/Public_Unrestricted/UKBB_LD/{params.ld_ranges} \
        --sumstats output/{wildcards.ss}/priors/{wildcards.ss}_l2-ldsc.{params.chrom}.snpvar_ridge_constrained.gz \
        --n {params.sample_size_gwas} \
        --chr {params.chrom} \
        --start {params.start} \
        --end {params.end} \
        --method susie \
        --max-num-causal 5 \
        --out {output.output} \
        --allow-missing
        """

rule merge_finemapping_jobs_onlysusie:
    input: expand("output/{{ss}}/only_susie_UKB_finemap/{{ss}}_only_susie.{snp}.gz", ss=SS, snp=lambda wildcards: snp_tables[wildcards.ss].index.tolist())
    output: "output/{ss}/only_susie_UKB_finemap/{ss}_only_susie_all.txt.gz"
    conda: "envs/polyfun.yml"
    resources: mem_mb=8000
    shell: "cat {input} >> {output}"
